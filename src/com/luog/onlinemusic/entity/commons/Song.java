package com.luog.onlinemusic.entity.commons;
// Generated Jan 31, 2018 11:31:17 AM by Hibernate Tools 5.2.6.Final

import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;

/**
 * Song generated by hbm2java
 */
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@JsonSerialize(include=Inclusion.NON_NULL)
@Entity
@Table(name = "song", catalog = "online_music")
public class Song implements java.io.Serializable {

	private Integer id;
	private String name;
	private String link;
	private String lyric;
	private Integer listen;
	private boolean status;
	private boolean video;
	private String videoLink;
	private String videoPhoto;
	private Integer view;
	private Date uploadedTime;
	private String uploadedBy;
	private List<AuthorDetail> authorDetails = new ArrayList<AuthorDetail>(0);
	private List<Chart> charts = new ArrayList<Chart>(0);
	private List<Comment> comments = new ArrayList<Comment>(0);
	private List<AlbumSong> albumSongs = new ArrayList<AlbumSong>(0);
	private List<PlayListDetail> playListDetails = new ArrayList<PlayListDetail>(0);
	private List<SongDetail> songDetails = new ArrayList<SongDetail>(0);
	private List<CategoryDetail> categoryDetails = new ArrayList<CategoryDetail>(0);

	public Song() {
	}

	public Song(String name, String link, String lyric, boolean status, boolean video, Integer view,  String videoLink,
			String videoPhoto, Date uploadedTime, String uploadedBy) {
		this.name = name;
		this.link = link;
		this.lyric = lyric;
		this.status = status;
		this.video = video;
		this.view = view;
		this.videoLink = videoLink;
		this.videoPhoto = videoPhoto;
		this.uploadedTime = uploadedTime;
		this.uploadedBy = uploadedBy;
	}

	public Song(String name, String link, String lyric, Integer listen, boolean status, boolean video, Integer view, String videoLink,
			String videoPhoto, Date uploadedTime, String uploadedBy, List<AuthorDetail> authorDetails, List<Chart> charts,
			List<Comment> comments, List<AlbumSong> albumSongs, List<PlayListDetail> playListDetails,
			List<SongDetail> songDetails, List<CategoryDetail> categoryDetails) {
		this.name = name;
		this.link = link;
		this.lyric = lyric;
		this.listen = listen;
		this.status = status;
		this.video = video;
		this.view = view;
		this.videoLink = videoLink;
		this.videoPhoto = videoPhoto;
		this.uploadedTime = uploadedTime;
		this.uploadedBy = uploadedBy;
		this.authorDetails = authorDetails;
		this.charts = charts;
		this.comments = comments;
		this.albumSongs = albumSongs;
		this.playListDetails = playListDetails;
		this.songDetails = songDetails;
		this.categoryDetails = categoryDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "name", nullable = false, length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "link", nullable = false, length = 250)
	public String getLink() {
		return this.link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	@Column(name = "lyric", nullable = false, length = 65535)
	public String getLyric() {
		return this.lyric;
	}

	public void setLyric(String lyric) {
		this.lyric = lyric;
	}

	@Column(name = "listen")
	public Integer getListen() {
		return this.listen;
	}

	public void setListen(Integer listen) {
		this.listen = listen;
	}

	@Column(name = "view", nullable = false)
	public Integer getView() {
		return this.view;
	}

	public void setView(Integer view) {
		this.view = view;
	}

	@Column(name = "status", nullable = false)
	public boolean isStatus() {
		return this.status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	@Column(name = "video", nullable = false)
	public boolean isVideo() {
		return this.video;
	}

	public void setVideo(boolean video) {
		this.video = video;
	}
	
	@Column(name = "video_link", nullable = true, length = 250)
	public String getVideoLink() {
		return this.videoLink;
	}

	public void setVideoLink(String videoLink) {
		this.videoLink = videoLink;
	}

	@Column(name = "video_photo", nullable = true, length = 250)
	public String getVideoPhoto() {
		return this.videoPhoto;
	}

	public void setVideoPhoto(String videoPhoto) {
		this.videoPhoto = videoPhoto;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "uploaded_time", nullable = false, length = 19)
	public Date getUploadedTime() {
		return this.uploadedTime;
	}

	public void setUploadedTime(Date uploadedTime) {
		this.uploadedTime = uploadedTime;
	}

	@Column(name = "uploaded_by", nullable = false, length = 100)
	public String getUploadedBy() {
		return this.uploadedBy;
	}

	public void setUploadedBy(String uploadedBy) {
		this.uploadedBy = uploadedBy;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<AuthorDetail> getAuthorDetails() {
		return this.authorDetails;
	}

	public void setAuthorDetails(List<AuthorDetail> authorDetails) {
		this.authorDetails = authorDetails;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<Chart> getCharts() {
		return this.charts;
	}

	public void setCharts(List<Chart> charts) {
		this.charts = charts;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<Comment> getComments() {
		return this.comments;
	}

	public void setComments(List<Comment> comments) {
		this.comments = comments;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<AlbumSong> getAlbumSongs() {
		return this.albumSongs;
	}

	public void setAlbumSongs(List<AlbumSong> albumSongs) {
		this.albumSongs = albumSongs;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<PlayListDetail> getPlayListDetails() {
		return this.playListDetails;
	}

	public void setPlayListDetails(List<PlayListDetail> playListDetails) {
		this.playListDetails = playListDetails;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<SongDetail> getSongDetails() {
		return this.songDetails;
	}

	public void setSongDetails(List<SongDetail> songDetails) {
		this.songDetails = songDetails;
	}
	
	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "song")
	public List<CategoryDetail> getCategoryDetails() {
		return this.categoryDetails;
	}

	public void setCategoryDetails(List<CategoryDetail> categoryDetails) {
		this.categoryDetails = categoryDetails;
	}

}
